<%-- 
     Document   : recommendation
 --%>

<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
	  "http://www.w3.org/TR/html4/loose.dtd">

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <link rel="stylesheet" type="text/css" href="<c:url value="/style/main.css"/>">
    <title>TasteKeeper Recommendations</title>
  </head>
  <body>
    <%@include file="/WEB-INF/jspf/header.jspf"%>
    <%@include file="/WEB-INF/jspf/sidebar.jspf"%>
    <div class="main">
      <div class="mainTitle"><img src="images/tklogo.png"></div>
      <div class="sectionTitle">What makes a good recommendation?</div>
      <div class="regularTxt">
        <p> 
	  Generating good recommendations requires taking a number
	  of factors into account.
	</p>
	<p>
	  Although users are very likely to want recommendations for
	  items that they haven't seen before, if we only offer
	  recommendations for things that they haven't seen then they
	  will have no way to decide whether a given recommendation is
	  a good one or not.  This can erode the user's trust in the
	  recommender, which leads to them not using the recommender.
	  As a result, it's often best to generate a combination of
	  familiar (although perhaps not recently consumed) items and
	  unfamiliar items in a recommendation.
	</p>
	<p>
	  Users should be able to discover new items in a
	  serendipitous way.  For example, when a user is looking for
	  information about their favorite musical artist, the
	  recommendations generated should provide a way for them to
	  discover new artists that they might like.  This discovery
	  process provides a different kind of interaction than a
	  typical static list of recommended items.
	</p>
	<p>
	  When a user recieves a recommendation for an item, the
	  system should be able to provide an explanation to the
	  user as to why the item was recommended.  Furthermore, in
	  the case when a particularly good or bad recommendation is
	  made, the user should be able to <em>steer</em> the
	  recommender by indicating what aspects of a particular
	  item are good or bad.  It should be immediately apparent
	  to the user how their steering has affected the
	  recommendations provided.
	</p>
      </div>
      <div class="sectionTitle">Collaborative Filtering and The
      Wisdom of the Crowds</div>
      <div class="regularTxt">
        <p>
	  Current recommender systems rely on "the wisdom of the
	  crowds" using a technique called <em>collaborative
	  filtering</em>.  In a collaborative filtering system, an
	  item is represented by the users who have consumed that
	  item.
        </p>
        <p>
	  To oversimplify somewhat, the similarity between two items
	  can be determined by computing the similarity of the set of
	  users.  Recommendations for a given item are generated by
	  finding the set of similar items and displaying the most
	  similar ones.
        </p>
	<p>
	  Unfortunately, collaborative filtering has several drawbacks
	  that can ultimately lead
	  to <a href="http://blogs.sun.com/plamere/category/freakomendations">poor
	  recommendations</a>.  In particular, these systems suffer
	  from the <em>cold start problem</em>.  A new item that has
	  not been consumed cannot be recommended.  This is especially
	  a problem for a new recommender.  As people begin to
	  discover more and more things via recommendation, feedback
	  loops can develop where only recommended items get popular
	  and only popular items get recommended.
	</p>
      </div>
      <div class="sectionTitle">The Textual Aura</div>
      <div class="regularTxt">
	<p>
	  The AURA Project takes a novel approach to recommendation,
	  avoiding many of the problems inherent in standard
	  recommender systems.  In addition to representing an item by
	  the users that have consumed it, we also represent an item
	  using a <em>textual aura</em> that can be gathered from
	  social tags applied to the items, reviews of the items, blog
	  posts about the items, and even the content of the items
	  themselves.
	</p>

	<p>
	  In some sense, an item can be considered a "document", and
	  the words in the document are the words in the textual aura
	  for that item.  Here's an example of the textual aura
	  collected for <a href="http://music.tastekeeper.com/#artist:06fb1c8b-566e-4cb2-985b-b467c90781d4">Jimi Hendrix</a>:
	</p>

	<div align="center">
	<img src="images/hendrixcloud.png"/>
	</div>

	<p>
	  This part of Jimi's aura was built from social tags crawled
	  from <a href="http://last.fm">Last.fm</a>.  Here we see the
	  aura displayed as a tag cloud.  This cloud is different from
	  others that you may have seen, however.  Here, the size of a
	  tag is related to how <em>important</em> that particular tag
	  is to Jimi Hendrix, not simply how many times the tag has
	  been applied to him.
	</p>

	<p>
	  How do we decide what the important words are?  We use a
	  measure of importance taken from the information retrieval
	  community.  The measure is known
	  as <a href="http://en.wikipedia.org/wiki/Tfidf">TFIDF</a>
	  and the basic idea is that a particular word is important
	  for a document (Jimi Hendrix in this example), if it occurs
	  frequently in that document and infrequently in other
	  documents.
	</p>

	<p>
	  Given this textual aura, we can compute the similarity
	  between two items based on the similarity of the textual
	  auras of the two items.  This approach avoids the cold start
	  problem and provides high quality recommendations.
	  Recommendations generated this way are <em>transparent</em>:
	  we can explain why an item was recommended using the words
	  from the textual aura.  We can also use the words from the
	  textual aura to <em>steer</em> the recommendations the
	  system is making by increasing the impact of particular
	  words and decreasing or removing the impact of other words.
	</p>

	<p>
	  Although the use of the textual aura resolves some of the
	  problems encountered by wisdom-of-the-crowds approach, we
	  think that a hybrid approach combining the best aspects of
	  the two approaches will provide the best recommendations.
	</p>
     </div>
    </div>
    <%@include file="/WEB-INF/jspf/footer.jspf"%>
  </body>
</html>
